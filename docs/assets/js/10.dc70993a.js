(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{194:function(t,a,e){"use strict";e.r(a);var s=e(0),i=Object(s.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"git-版本管理规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git-版本管理规范","aria-hidden":"true"}},[t._v("#")]),t._v(" git 版本管理规范")]),t._v(" "),e("p",[t._v("git 版本管理主要从以下几个方面来制定规范。")]),t._v(" "),e("ol",[e("li",[t._v("commit message 规范")]),t._v(" "),e("li",[t._v("tag 标签管理")]),t._v(" "),e("li",[t._v("统一的changelog 文件信息")]),t._v(" "),e("li",[t._v("分支管理")]),t._v(" "),e("li",[t._v("禁止的操作")]),t._v(" "),e("li",[t._v("git的基本概览")]),t._v(" "),e("li",[t._v("git的某些操作")])]),t._v(" "),e("h2",{attrs:{id:"commit-message-规范"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-规范","aria-hidden":"true"}},[t._v("#")]),t._v(" commit message 规范")]),t._v(" "),e("p",[t._v("每个 commit message 包含一个 header, 一个 body 和一个 footer。header由 type，scope，subject 组成。header中的 type 和 subject 是必填的，scope 选填。body 和 footer 选填。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>\n")])])]),e("h3",{attrs:{id:"type"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#type","aria-hidden":"true"}},[t._v("#")]),t._v(" Type")]),t._v(" "),e("ul",[e("li",[t._v("feat: 新功能")]),t._v(" "),e("li",[t._v("fix: 在提测或者上线之后修复的bug")]),t._v(" "),e("li",[t._v("docs: 仅仅修改了文档.如：README,CHANGELOG等")]),t._v(" "),e("li",[t._v("style: 修改代码风格.如：修改了缩进，空格，逗号；增加，修改，删除了注释；删除多余的文件；删除console.log等")]),t._v(" "),e("li",[t._v("refactor: 代码重构，没有新增功能也没有修复bug")]),t._v(" "),e("li",[t._v("pref: 性能优化")]),t._v(" "),e("li",[t._v("test: 修改测试用例。如单元测试，集成测试等")]),t._v(" "),e("li",[t._v("revert: 回滚到某个版本")]),t._v(" "),e("li",[t._v("chore: 改变构建流程，增加了依赖库或修改了配置文件等")])]),t._v(" "),e("h3",{attrs:{id:"scope"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#scope","aria-hidden":"true"}},[t._v("#")]),t._v(" Scope")]),t._v(" "),e("p",[t._v("在scope中指定本次变更修改的文件")]),t._v(" "),e("h3",{attrs:{id:"格式要求"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#格式要求","aria-hidden":"true"}},[t._v("#")]),t._v(" 格式要求")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("# header：52个字符以内，描述主要变更内容\n#\n# body：更详细的说明文本，建议72个字符以内。 需要描述的信息包括:\n#\n# * 为什么这个变更是必须的? 它可能是用来修复一个bug，增加一个feature，提升性能、可靠性、稳定性等等\n# * 他如何解决这个问题? 具体描述解决问题的步骤\n# * 是否存在副作用、风险? \n#\n# footer：如果需要的化可以添加一个链接到issue地址，或者关闭某个issue。\n")])])]),e("p",[t._v("例子：")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("feat(app.css): 去掉所有a标签的下划线\n\n由于UI改版，所有去掉系统中所有a标签的下划线\n")])])]),e("h3",{attrs:{id:"不符合规定格式的日志拒绝提交"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#不符合规定格式的日志拒绝提交","aria-hidden":"true"}},[t._v("#")]),t._v(" 不符合规定格式的日志拒绝提交")]),t._v(" "),e("p",[t._v("使用 commitlint 和 husky 验证并限制 commit message.")]),t._v(" "),e("h3",{attrs:{id:"commit-类型选择提示"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#commit-类型选择提示","aria-hidden":"true"}},[t._v("#")]),t._v(" commit 类型选择提示")]),t._v(" "),e("p",[t._v("使用 commitizen 工具")]),t._v(" "),e("h2",{attrs:{id:"tag-标签管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tag-标签管理","aria-hidden":"true"}},[t._v("#")]),t._v(" tag 标签管理")]),t._v(" "),e("p",[t._v("tag标签管理分为三种情况，产品没有明确的版本概念，产品有明确的版本的概览，工具库或者UI组件库的开发。")]),t._v(" "),e("h3",{attrs:{id:"工具库或ui组件库的开发"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工具库或ui组件库的开发","aria-hidden":"true"}},[t._v("#")]),t._v(" 工具库或UI组件库的开发")]),t._v(" "),e("p",[t._v("版本格式：主版本号.次版本号.修订号（X.Y.Z），版本号递增规则如下：")]),t._v(" "),e("ul",[e("li",[t._v("主版本号：当你做了不兼容的 API 修改，")]),t._v(" "),e("li",[t._v("次版本号：当你做了向下兼容的功能性新增，")]),t._v(" "),e("li",[t._v("修订号：当你做了向下兼容的问题修正。")])]),t._v(" "),e("p",[t._v("版本控制规范")]),t._v(" "),e("ol",[e("li",[t._v("标准的版本号必须采用X.Y.Z的格式，其中X.Y.Z为非负整数，禁止在数字前方补零，X 是主版本号、Y 是次版本号、而 Z 为修订号。")]),t._v(" "),e("li",[t._v("标记版本号的工具库或者UI组件库发发行后，禁止修改该版本的内容，任何修改必须以新版本发行。")]),t._v(" "),e("li",[t._v("主版本号为0时，表示此时处于初始开发阶段，一切都可能随时被改变，此时工具库或者UI组件库还不稳定。")]),t._v(" "),e("li",[t._v("1.0.0的版本号用于界定稳定版形成。")]),t._v(" "),e("li",[t._v("修订号Z必须在做了向下兼容的修改时才能递增，这里的修改指的是针对不正确结果而进行的内部修改。")]),t._v(" "),e("li",[t._v("次版本号 Y 必须在有向下兼容的新功能出现时递增。也可以在内部程序有大量改进被加入时递增，其中可以包括修订级别的改变。每当次版本号递增时，修订号必须（MUST）归零。")]),t._v(" "),e("li",[t._v("主版本号 X必须在有任何不兼容的修改被加入时递增。其中可以包括次版本号及修订级别的改变。每当主版本号递增时，次版本号和修订号必须（MUST）归零。")])]),t._v(" "),e("h3",{attrs:{id:"产品有明确的版本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#产品有明确的版本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 产品有明确的版本概念")]),t._v(" "),e("p",[t._v("版本格式与产品的版本一致，如果版本发布之后有修订版就在版本后面加上后缀，用中划线分隔，fix后面加上次数，即第几次fix。例如: v1.2.4   v1.2.4-fix1")]),t._v(" "),e("h3",{attrs:{id:"产品没有明确的版本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#产品没有明确的版本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" 产品没有明确的版本概念")]),t._v(" "),e("p",[t._v("在产品没有明确版本的概念时以本期大的功能修改作为版本号，如果涉及到多个功能模版的修改，模块之间以点(.)分割，最多不超过两个点(.)，如果版本发布之后有修订版就在版本后面加上后缀，用中划线分隔，fix后面加上次数，即第几次fix。例如：userDetail.home.depDetail userDetail.home.depDetail-fix1")]),t._v(" "),e("p",[t._v("版本发布之前打tag，如果在本次打tag之后有修改则根据实际情况版本递增，打tag之后使用 "),e("code",[t._v("git push origin --tags")]),t._v(" 推送所有本地新增的tag到远端。")]),t._v(" "),e("h2",{attrs:{id:"统一的-changelog-文件信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#统一的-changelog-文件信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 统一的 changelog 文件信息")]),t._v(" "),e("p",[t._v("对于开发的工具库或者UI组件库，使用conventional-changelog-cli生成changelog日志文件，它会根据commits生成日志文件。")]),t._v(" "),e("h2",{attrs:{id:"分支管理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),e("h3",{attrs:{id:"分支名"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分支名","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支名")]),t._v(" "),e("ul",[e("li",[t._v("线上bug修复：fix-feature/xxx，xxx表示要修复的功能")]),t._v(" "),e("li",[t._v("线上环境的分支：默认只有一个线上环境，所以线上环境的默认分支是master，如果存在多个线上环境，除master之外的线上环境分支为:master-xxx,xxx代表功能，例如: master-saas。")]),t._v(" "),e("li",[t._v("需求分支：如果本次需求有发布或者最终完成的时间（完成指开发且测试通过），分支名为feat-20191019，如果没有确定的时间，分支名为feat-feature/xxx。如果本次需求由多人协同开发，就在大分支名后面加后缀。如：feat-20190405-bella，feat-feature/goodsManger-bella")]),t._v(" "),e("li",[t._v("性能优化分支: 分支命名规则与需求分支的命名规则类似，只是将前缀feat改成pref")])]),t._v(" "),e("h3",{attrs:{id:"开发的工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#开发的工作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 开发的工作流程")]),t._v(" "),e("ol",[e("li",[t._v("修复线上bug：从线上环境对应的分支checkout一个fix分支用于修复bug，bug修复完成之后如果这个bug需要立即上线，就以这个fix分支提测，测试通过上线，将fix分支合入线上环境的分支,删除fix分支；如果这个bug要等到下一次和功能需求一起上线，就将这个fix分支合入功能分支上与功能需求一起上线")])]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("切换到master分支\ngit checkout master\n\n基于master 建一个fix分支\ngit checkout -b fix-feature/home\n\n提测\n以fix-feature/home分支的代码推送到测试环境\n\n上线之后\ngit checkout master\ngit merge fix-feature/home\n\n将所有的分支推送到远端仓库\ngit push --all\n\n删除分支\ngit branch -d fix-feature/home\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("需求开发：从线上环境对应的分支checkout一个feat分支，如果本次需求由多人协同开发，就基于大的feat分支checkout个人feat分支,开发完成之后每个人将自己的分支合如feat分支，以feat分支提测，测试通过上线将feat分支合入线上分支，删除feat分支。")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("切换到master分支\ngit checkout master\n\n基于master分支建feat分支\ngit checkout -b feat-20190102\n\n如果涉及多人开发，每个人创建自己的开发分支\ngit checkout -b feat-20190102-bella\n\n多人开发完成，将自己的代码合并到这次共同的开发分支上\ngit checkout feat-20190102\ngit merge feat-20190102-bella\n\n提测\n以feat-20190102分支的代码推送到测试环境\n\n上线之后\ngit checkout master\ngit merge feat-20190102\n\n将所有的分支推送到远端仓库\ngit push --all\n\n删除分支\ngit branch -d feat-20190102\n\n")])])]),e("h2",{attrs:{id:"工作流程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#工作流程","aria-hidden":"true"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),e("ol",[e("li",[t._v("基于线上分支创建功能分支")]),t._v(" "),e("li",[t._v("功能开发")]),t._v(" "),e("li",[t._v("根据功能提交 commit")]),t._v(" "),e("li",[t._v("将多人协同开发的代码合并")]),t._v(" "),e("li",[t._v("提测")]),t._v(" "),e("li",[t._v("生成统一的changelog文件信息并且commit(可选)")]),t._v(" "),e("li",[t._v("上线")]),t._v(" "),e("li",[t._v("将变更合并到线上分支")]),t._v(" "),e("li",[t._v("打标签")]),t._v(" "),e("li",[t._v("删除功能分支")]),t._v(" "),e("li",[t._v("push")])]),t._v(" "),e("blockquote",[e("p",[t._v("上述流程是前端和后端同时发布，如果是前后端分开分布，工作流程会变成1,2,3,4,5,8,6.9,11,7,10")])]),t._v(" "),e("h2",{attrs:{id:"禁止的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#禁止的操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 禁止的操作")]),t._v(" "),e("ol",[e("li",[t._v("禁止在团队公共分支上执行git push -f 操作")]),t._v(" "),e("li",[t._v("禁止在团队公共分支执行git base变基操作，团队的公共分支的变更记录只能往前走，不能修改历史的变更记录")]),t._v(" "),e("li",[t._v("禁止在团队公共分支执行git reset 操作进行代码回滚，如果需要回滚就使用git revert")])]),t._v(" "),e("h2",{attrs:{id:"git的基本概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的基本概念","aria-hidden":"true"}},[t._v("#")]),t._v(" git的基本概念")]),t._v(" "),e("h3",{attrs:{id:"git中三大对象commit-tree-和-blob"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git中三大对象commit-tree-和-blob","aria-hidden":"true"}},[t._v("#")]),t._v(" git中三大对象commit , tree 和 blob")]),t._v(" "),e("p",[t._v("每次执行git commit操作都会生成一个commit对象，每个commit对象中会包含一个tree对象。tree对象中保存了本次执行commit操作时本项目仓库中所有文件夹和文件的快照，在git中blob对象表示文件，如果两个文件如果文件内容一样，那么对应同一个blob。")]),t._v(" "),e("h3",{attrs:{id:"分离头指针"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分离头指针","aria-hidden":"true"}},[t._v("#")]),t._v(" 分离头指针")]),t._v(" "),e("p",[t._v("执行 "),e("code",[t._v("git checkout <commit>")]),t._v(" 命令会让git出于分离头指针的状态。在处于分离头指针的状态可以继续开发也可以继续产生commit而且不会影响其他分支。分离头指针的本质就是当前工作在没有分支的状态下，在这种状态下做的变更不与任何分支绑定，在分离头指针的状态下做了变更并产生了commit，然后又切换到其他分支，之前产生的变更很可能会被git当作垃圾清理掉")]),t._v(" "),e("h3",{attrs:{id:"变基"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#变基","aria-hidden":"true"}},[t._v("#")]),t._v(" 变基")]),t._v(" "),e("p",[t._v("提取某一个分支上的修改，将修改应用到另一分支上，这种操作变基。通过变基能够完成的操作有：合并代码和修改commit message 信息。")]),t._v(" "),e("h2",{attrs:{id:"git的操作"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#git的操作","aria-hidden":"true"}},[t._v("#")]),t._v(" git的操作")]),t._v(" "),e("h3",{attrs:{id:"配置git"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#配置git","aria-hidden":"true"}},[t._v("#")]),t._v(" 配置git")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("配置user.name : git config --global user.name 'your name'\n配置user.email : git config --global user.email 'your email'\n")])])]),e("ol",[e("li",[t._v("config 参数")])]),t._v(" "),e("ul",[e("li",[t._v("git config --local : 只对某个仓库有效")]),t._v(" "),e("li",[t._v("git config --global : 对当前用户所有的仓库有效")]),t._v(" "),e("li",[t._v("git config --system : 对系统所有的登录用户有效")])]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("显示config的配置")])]),t._v(" "),e("p",[e("code",[t._v("git config --list")]),t._v("会将所有范围的config配置都显示出来。如果只想显示某一个范围的config配置，就要加范围参数(如：--local,--global,--system)")]),t._v(" "),e("h3",{attrs:{id:"修改commit-message-信息"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#修改commit-message-信息","aria-hidden":"true"}},[t._v("#")]),t._v(" 修改commit message 信息")]),t._v(" "),e("ol",[e("li",[t._v("修改最新的commit")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git commit --amend\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("修改老的commit的message")])]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("git rebase -i  "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("参数-i后的commit值是需要修改message信息的commit的父commit的哈希值。执行这个命名后根据命令行中的提示进行操作就可以达到修改commit message的目的，在交互界面使用r命令。")]),t._v(" "),e("ol",{attrs:{start:"3"}},[e("li",[t._v("将多个连续的commit合并成一个commit")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git rebase -i  <commit>\n")])])]),e("p",[t._v("git rebase -i < commit >。-i参数后的commit hash值是需要合并成一个commit的多个连续commit的最近的父commit的hash值。在交互界面使用s命令")]),t._v(" "),e("ol",{attrs:{start:"4"}},[e("li",[t._v("将间隔的多个commit合并成一个commit")])]),t._v(" "),e("div",{staticClass:"language-html extra-class"},[e("pre",{pre:!0,attrs:{class:"language-html"}},[e("code",[t._v("git rebase -i "),e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token tag"}},[e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("commit")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])]),e("p",[t._v("在交互界面中使用s命令，并且将间隔的commit放在一起")]),t._v(" "),e("blockquote",[e("p",[t._v("在commit没有被推送到远端仓库之前可以修改commit message，禁止修改公共分支上的commit message。如果要修改第一次提交的commit message， 在提交列表中，可以手工将根commit添加进来。更简单的方式是使用 "),e("code",[t._v("git rebase -i --root")]),t._v(" 命令，该命令允许你在分支上变基根提交.")])]),t._v(" "),e("h3",{attrs:{id:"回退版本"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#回退版本","aria-hidden":"true"}},[t._v("#")]),t._v(" 回退版本")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git revert <commit>…​\n")])])]),e("p",[t._v("还原一个或者多个commit 的修改。")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git revert commit2..commit5\n")])])]),e("p",[t._v("恢复commit2(不包含)到commit5(包含)之间变更")]),t._v(" "),e("h3",{attrs:{id:"打标签"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#打标签","aria-hidden":"true"}},[t._v("#")]),t._v(" 打标签")]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git tag v1.0.0\n")])])]),e("ol",[e("li",[t._v("后期加tag")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git tag -a v1.0.0 commitId\n")])])]),e("ol",{attrs:{start:"2"}},[e("li",[t._v("将本地新增的标签推送到远端")])]),t._v(" "),e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[t._v("git push --tags\n")])])])])},[],!1,null,null,null);a.default=i.exports}}]);