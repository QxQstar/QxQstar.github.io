(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{253:function(e,n,t){"use strict";t.r(n);var w=t(0),x=Object(w.a)({},function(){var e=this.$createElement,n=this._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[n("p",[this._v("1.weex致力于通过跨平台的web开发语言和开发经验，来构建Android、iOS 和 Web 应用。\n2.weex不依赖于特定的前端框架，目前weex提供了对Vue.js和Rax最完美的支持。\n3.在开发阶段，一个weex页面就像开发普通网页一样，在运行时，weex又充分利用了各种操作系统的原生组件和能力\n4.weex提供了一套基本的内置组件，可以对这些组件进行封装，组合形成自己的组件。在框架内部，weex使用原生组件来渲染，在不同平台或多或少会有一些渲染和行为上的差异\n5.weex提供了一些内置模块。Weex 模块包装了网络、存储、剪切板、导航等各种功能供前端调用，你也可以根据需要封装自定义模块，Weex 提供了横向扩展的能力，可以扩展原生模块。通过"),n("code",[this._v("weex.requireModule('xxx')")]),this._v(" 引入一个模块\n6.通过"),n("code",[this._v("WXEnvironment")]),this._v("来获取当前执行环境的信息\n7.weex需要依赖前端框架来编写，但是weex并没有绑定，限制特定的框架。Vue.js和Rax已经集成在weex中，并默认提供\n8.weex是一种跨平台的解决方案，在不同平台上的功能和开发体验都存在一些差异。\n9.weex运行环境以原生为主，在Android和iOS上渲染出的是原生组件，所以在weex中没有DOM，不支持DOM操作，没有BOM，事件的行为和浏览器中有所不同，事件属性也和web中有差异")])])},[],!1,null,null,null);n.default=x.exports}}]);